{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "import numpy as np\n",
    "import cv2\n",
    "from skimage.feature import hog\n",
    "\n",
    "\n",
    "# Define a function to return HOG features and visualization\n",
    "def get_hog_features(img, orient, pix_per_cell, cell_per_block, \n",
    "                        vis=False, feature_vec=True):\n",
    "    # Call with two outputs if vis==True\n",
    "    if vis == True:\n",
    "        features, hog_image = hog(img, orientations=orient, \n",
    "                                  pixels_per_cell=(pix_per_cell, pix_per_cell),\n",
    "                                  cells_per_block=(cell_per_block, cell_per_block), \n",
    "                                  transform_sqrt=True,\n",
    "                                  visualise=vis, feature_vector=feature_vec)\n",
    "        return features, hog_image\n",
    "    # Otherwise call with one output\n",
    "    else:      \n",
    "        features = hog(img, orientations=orient, \n",
    "                       pixels_per_cell=(pix_per_cell, pix_per_cell),\n",
    "                       cells_per_block=(cell_per_block, cell_per_block), \n",
    "                       transform_sqrt=True, \n",
    "                       visualise=vis, feature_vector=feature_vec)\n",
    "#        print(features.shape)\n",
    "        return features\n",
    "\n",
    "# Define a function to compute binned color features  \n",
    "def bin_spatial(img, size=(32, 32)):\n",
    "    # Use cv2.resize().ravel() to create the feature vector\n",
    "    features = cv2.resize(img, size).ravel() \n",
    "    # Return the feature vector\n",
    "    return features\n",
    "\n",
    "# Define a function to compute color histogram features \n",
    "# NEED TO CHANGE bins_range if reading .png files with mpimg!\n",
    "def color_hist(img, nbins=32, bins_range=(0, 256)):\n",
    "    # Compute the histogram of the color channels separately\n",
    "    channel1_hist = np.histogram(img[:,:,0], bins=nbins, range=bins_range)\n",
    "    channel2_hist = np.histogram(img[:,:,1], bins=nbins, range=bins_range)\n",
    "    channel3_hist = np.histogram(img[:,:,2], bins=nbins, range=bins_range)\n",
    "    # Concatenate the histograms into a single feature vector\n",
    "    hist_features = np.concatenate((channel1_hist[0], channel2_hist[0], channel3_hist[0]))\n",
    "    # Return the individual histograms, bin_centers and feature vector\n",
    "    return hist_features\n",
    "\n",
    "# Define a function to extract features from a list of images\n",
    "# Have this function call bin_spatial() and color_hist()\n",
    "def extract_features(imgs, color_space='RGB', spatial_size=(32, 32),\n",
    "                        hist_bins=32, orient=9, \n",
    "                        pix_per_cell=8, cell_per_block=2, hog_channel=0,\n",
    "                        spatial_feat=True, hist_feat=True, hog_feat=True,feature_vec=True):\n",
    "    # Create a list to append feature vectors to\n",
    "    features = []\n",
    "    # Iterate through the list of images\n",
    "    for file in imgs:\n",
    "        file_features = []\n",
    "        # Read in each one by one\n",
    "        image = mpimg.imread(file)\n",
    "        \n",
    "        img_features = single_img_features(image,color_space,spatial_size,hist_bins,orient, \n",
    "                        pix_per_cell,cell_per_block,hog_channel,\n",
    "                        spatial_feat,hist_feat,hog_feat,feature_vec)        \n",
    "        \n",
    "        features.append(np.concatenate(img_features))\n",
    "    # Return list of feature vectors\n",
    "    return features\n",
    "    \n",
    "\n",
    "# Define a function to extract features from a single image window\n",
    "# This function is very similar to extract_features()\n",
    "# just for a single image rather than list of images\n",
    "def single_img_features(img, color_space='RGB', spatial_size=(32, 32),\n",
    "                        hist_bins=32, orient=9, \n",
    "                        pix_per_cell=8, cell_per_block=2, hog_channel=0,\n",
    "                        spatial_feat=True, hist_feat=True, hog_feat=True,feature_vec=True):    \n",
    "    #1) Define an empty list to receive features\n",
    "    img_features = []   \n",
    "#    img= cv2.GaussianBlur(img, (9, 9), 0)    \n",
    "    \n",
    "    #2) Apply color conversion if other than 'RGB'\n",
    "    if color_space != 'RGB':\n",
    "        if color_space == 'HSV':\n",
    "            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n",
    "        elif color_space == 'LUV':\n",
    "            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2LUV)\n",
    "        elif color_space == 'HLS':\n",
    "            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)\n",
    "        elif color_space == 'YUV':\n",
    "            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YUV)\n",
    "        elif color_space == 'YCrCb':\n",
    "            feature_image = cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)\n",
    "    else: feature_image = np.copy(img)      \n",
    "    #3) Compute spatial features if flag is set\n",
    "    if spatial_feat == True:\n",
    "        spatial_features = bin_spatial(feature_image, size=spatial_size)\n",
    "        #4) Append features to list\n",
    "        img_features.append(spatial_features)\n",
    "    #5) Compute histogram features if flag is set\n",
    "    if hist_feat == True:\n",
    "        hist_features = color_hist(feature_image, nbins=hist_bins)\n",
    "        #6) Append features to list\n",
    "        img_features.append(hist_features)\n",
    "    #7) Compute HOG features if flag is set\n",
    "    if hog_feat == True:\n",
    "        if isinstance(hog_channel,str):\n",
    "          if hog_channel == 'ALL':\n",
    "            hog_features = []\n",
    "            for channel in range(feature_image.shape[2]):\n",
    "                hog_features.append(get_hog_features(feature_image[:,:,channel], \n",
    "                                    orient, pix_per_cell, cell_per_block, \n",
    "                                    vis=False, feature_vec=feature_vec))      \n",
    "            if feature_vec:\n",
    "              hog_features = np.ravel(hog_features)        \n",
    "          else:\n",
    "            channels = hog_channel.split(\",\")\n",
    "            hog_features = []\n",
    "            for channel in channels:\n",
    "                hog_features.append(get_hog_features(feature_image[:,:,int(channel)], \n",
    "                                    orient, pix_per_cell, cell_per_block, \n",
    "                                    vis=False, feature_vec=feature_vec))      \n",
    "            \n",
    "            if feature_vec:\n",
    "              hog_features = np.ravel(hog_features)        \n",
    "        else:\n",
    "            hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, \n",
    "                        pix_per_cell, cell_per_block, vis=False, feature_vec=feature_vec)\n",
    "        #8) Append features to list\n",
    "        img_features.append(hog_features)\n",
    "\n",
    "    #9) Return concatenated array of features\n",
    "#    return np.concatenate(img_features)\n",
    "    return img_features\n",
    "    \n",
    "# Define a function that takes an image,\n",
    "# start and stop positions in both x and y, \n",
    "# window size (x and y dimensions),  \n",
    "# and overlap fraction (for both x and y)\n",
    "def slide_window(img, x_start_stop=[None, None], y_start_stop=[None, None], \n",
    "                    xy_window=(64, 64), xy_overlap=(0.5, 0.5)):\n",
    "    # If x and/or y start/stop positions not defined, set to image size\n",
    "    if x_start_stop[0] == None:\n",
    "        x_start_stop[0] = 0\n",
    "    if x_start_stop[1] == None:\n",
    "        x_start_stop[1] = img.shape[1]\n",
    "    if y_start_stop[0] == None:\n",
    "        y_start_stop[0] = 0\n",
    "    if y_start_stop[1] == None:\n",
    "        y_start_stop[1] = img.shape[0]\n",
    "    # Compute the span of the region to be searched    \n",
    "    xspan = x_start_stop[1] - x_start_stop[0]    \n",
    "    yspan = y_start_stop[1] - y_start_stop[0]\n",
    "    # Compute the number of pixels per step in x/y\n",
    "    nx_pix_per_step = xy_window[0]*(1 - xy_overlap[0])\n",
    "    ny_pix_per_step = xy_window[1]*(1 - xy_overlap[1])\n",
    "    # Compute the number of windows in x/y\n",
    "    nx_windows = np.int(xspan/nx_pix_per_step) \n",
    "    ny_windows = np.int(yspan/ny_pix_per_step)\n",
    "#    print(xspan,yspan,nx_pix_per_step ,ny_pix_per_step, nx_windows,ny_windows)\n",
    "    # Initialize a list to append window positions to\n",
    "    window_list = []\n",
    "    # Loop through finding x and y window positions\n",
    "    # Note: you could vectorize this step, but in practice\n",
    "    # you'll be considering windows one by one with your\n",
    "    # classifier, so looping makes sense\n",
    "    for ys in range(ny_windows):\n",
    "        for xs in range(nx_windows):\n",
    "            # Calculate window position\n",
    "            startx = int(xs*nx_pix_per_step + x_start_stop[0])\n",
    "            endx = int(min(startx + xy_window[0],x_start_stop[1]))\n",
    "            starty = int(ys*ny_pix_per_step + y_start_stop[0])\n",
    "            endy = int(min(starty + xy_window[1],y_start_stop[1])) \n",
    "            if endx - startx < xy_window[0]:\n",
    "              continue\n",
    "            if endy - starty < xy_window[1]:\n",
    "              continue\n",
    "            # Append window position to list\n",
    "            window_list.append(((startx, starty), (endx, endy)))\n",
    "    # Return the list of windows\n",
    "    return window_list\n",
    "\n",
    "# Define a function you will pass an image \n",
    "# and the list of windows to be searched (output of slide_windows())\n",
    "def searchWindowsOptimized(img, windows, clf, scaler, color_space='RGB', \n",
    "                    spatial_size=(32, 32), hist_bins=32, \n",
    "                    hist_range=(0, 256), orient=9, \n",
    "                    pix_per_cell=8, cell_per_block=2, \n",
    "                    hog_channel=0, spatial_feat=True, \n",
    "                    hist_feat=True, hog_feat=True, hardNegative=False):\n",
    "    global image_counter\n",
    "    #1) Create an empty list to receive positive detection windows\n",
    "    on_windows = []\n",
    "\n",
    "    if hog_feat:\n",
    "      hog_features = single_img_features(img, color_space=color_space, \n",
    "                          spatial_size=spatial_size, hist_bins=hist_bins, \n",
    "                          orient=orient, pix_per_cell=pix_per_cell, \n",
    "                          cell_per_block=cell_per_block, \n",
    "                          hog_channel=hog_channel, spatial_feat=False, \n",
    "                          hist_feat=False, hog_feat=True,feature_vec=False)\n",
    "      array = np.concatenate(hog_features)\n",
    "    \n",
    "    #2) Iterate over all windows in the list\n",
    "    for window in windows:\n",
    "        #3) Extract the test window from original image\n",
    "        features = []\n",
    "        test_img = cv2.resize(img[window[0][1]:window[1][1], window[0][0]:window[1][0]], (64, 64))      \n",
    "        #4) Extract features for that window using single_img_features()       \n",
    "        features = single_img_features(test_img, color_space=color_space, \n",
    "                          spatial_size=spatial_size, hist_bins=hist_bins, \n",
    "                          orient=orient, pix_per_cell=pix_per_cell, \n",
    "                          cell_per_block=cell_per_block, \n",
    "                          hog_channel=hog_channel, spatial_feat=spatial_feat, \n",
    "                          hist_feat=hist_feat, hog_feat=False,feature_vec=True)   \n",
    "        \n",
    "        if hog_feat:\n",
    "          start_x_block = int(window[0][0] /  pix_per_cell)\n",
    "          end_x_block = int(window[1][0] /  pix_per_cell)-1\n",
    "          start_y_block = int(window[0][1] / pix_per_cell)\n",
    "          end_y_block = int(window[1][1] /  pix_per_cell)-1\n",
    "\n",
    "          sub_hog_features = []\n",
    "          for i in range(array.shape[0]):\n",
    "            single_hog_feature = array[i,start_y_block:end_y_block,start_x_block:end_x_block,:,:,:]\n",
    "                \n",
    "            sub_hog_features.append(single_hog_feature)\n",
    "          sub_hog_features = np.ravel(sub_hog_features)   \n",
    "          features.append(sub_hog_features)\n",
    "            \n",
    "        features = np.concatenate(features)\n",
    "        #5) Scale extracted features to be fed to classifier\n",
    "        test_features = scaler.transform(np.array(features).reshape(1, -1))\n",
    "#check numy datatype for fats processing        \n",
    "#        print(test_features.flags['C_CONTIGUOUS'])\n",
    "        #6) Predict using your classifier       \n",
    "        prediction = clf.predict(test_features)\n",
    "\n",
    "        #7) If positive (prediction == 1) then save the window\n",
    "        if prediction == 1:\n",
    "            on_windows.append(window)\n",
    "            if hardNegative:\n",
    "              image_counter +=1\n",
    "              saveImageAndReturn(test_img,\"test\",image_counter)\n",
    "    #8) Return windows for positive detections\n",
    "    return on_windows\n",
    "\n",
    "# Define a function you will pass an image \n",
    "# and the list of windows to be searched (output of slide_windows())\n",
    "def searchWindows(img, windows, clf, scaler, color_space='RGB', \n",
    "                    spatial_size=(32, 32), hist_bins=32, \n",
    "                    hist_range=(0, 256), orient=9, \n",
    "                    pix_per_cell=8, cell_per_block=2, \n",
    "                    hog_channel=0, spatial_feat=True, \n",
    "                    hist_feat=True, hog_feat=True,hardNegative=False):\n",
    "    global image_counter\n",
    "\n",
    "    #1) Create an empty list to receive positive detection windows\n",
    "    on_windows = []\n",
    "    #2) Iterate over all windows in the list\n",
    "    for window in windows:\n",
    "        #3) Extract the test window from original image\n",
    "        test_img = cv2.resize(img[window[0][1]:window[1][1], window[0][0]:window[1][0]], (64, 64))      \n",
    "        #4) Extract features for that window using single_img_features()\n",
    "        features = single_img_features(test_img, color_space=color_space, \n",
    "                            spatial_size=spatial_size, hist_bins=hist_bins, \n",
    "                            orient=orient, pix_per_cell=pix_per_cell, \n",
    "                            cell_per_block=cell_per_block, \n",
    "                            hog_channel=hog_channel, spatial_feat=spatial_feat, \n",
    "                            hist_feat=hist_feat, hog_feat=hog_feat)\n",
    "        features = np.concatenate(features)\n",
    "        #5) Scale extracted features to be fed to classifier\n",
    "        test_features = scaler.transform(np.array(features).reshape(1, -1))\n",
    "        #6) Predict using your classifier\n",
    "        prediction = clf.predict(test_features)\n",
    "        #7) If positive (prediction == 1) then save the window\n",
    "        if prediction == 1:\n",
    "            on_windows.append(window)\n",
    "            #for hard negative mining\n",
    "            if hardNegative:\n",
    "              image_counter +=1\n",
    "              saveImageAndReturn(test_img,\"test\",image_counter)\n",
    "    #8) Return windows for positive detections\n",
    "    return on_windows\n",
    "        \n",
    "\n",
    "# Define a function to draw bounding boxes\n",
    "def drawBoxes(img, bboxes, color=(0, 0, 255), thick=6):\n",
    "    # Make a copy of the image\n",
    "    imcopy = np.copy(img)\n",
    "    # Iterate through the bounding boxes\n",
    "    for bbox in bboxes:\n",
    "        # Draw a rectangle given bbox coordinates\n",
    "        cv2.rectangle(imcopy, bbox[0], bbox[1], color, thick)\n",
    "    # Return the image copy with boxes drawn\n",
    "    return imcopy\n",
    "\n",
    "def add_heat(heatmap, bboxes):\n",
    "    # Iterate through list of bboxes\n",
    "    for box in bboxes:\n",
    "        # Add += 1 for all pixels inside each bbox\n",
    "        # Assuming each \"box\" takes the form ((x1, y1), (x2, y2))\n",
    "        heatmap[box[0][1]:box[1][1], box[0][0]:box[1][0]] += 1\n",
    "\n",
    "    # Return updated heatmap\n",
    "    return heatmap\n",
    "\n",
    "def apply_threshold(heatmap, threshold):\n",
    "    # Zero out pixels below the threshold\n",
    "    heatmap[heatmap <= threshold] = 0\n",
    "    # Return thresholded map\n",
    "    return heatmap\n",
    "\n",
    "def drawLabeledBoxes(img, labels):\n",
    "    # Iterate through all detected cars\n",
    "    for car_number in range(1, labels[1]+1):\n",
    "        # Find pixels with each car_number label value\n",
    "        nonzero = (labels[0] == car_number).nonzero()\n",
    "        # Identify x and y values of those pixels\n",
    "        nonzeroy = np.array(nonzero[0])\n",
    "        nonzerox = np.array(nonzero[1])\n",
    "        # Define a bounding box based on min/max x and y\n",
    "        bbox = ((np.min(nonzerox), np.min(nonzeroy)), (np.max(nonzerox), np.max(nonzeroy)))\n",
    "        # Draw the box on the image\n",
    "        cv2.rectangle(img, bbox[0], bbox[1], (255,0,0), 6)\n",
    "    # Return the image\n",
    "    return img\n",
    "\n",
    "\n",
    "#for logging bad situations\n",
    "def saveImageAndReturn(image, name, image_counter):\n",
    "  imageName = \"{0}{1}.png\".format(name,image_counter)\n",
    "\n",
    "  path_to_image = os.path.join(\"hardNegativeTest\",imageName)\n",
    "  scipy.misc.imsave(path_to_image, image)\n",
    "  print(\"stored image:\",imageName)\n",
    "  return image       \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def non_max_suppression_fast(boxes, overlapThresh):\n",
    "  # if there are no boxes, return an empty list\n",
    "  if len(boxes) == 0:\n",
    "    return []\n",
    " \n",
    "  # if the bounding boxes integers, convert them to floats --\n",
    "  # this is important since we'll be doing a bunch of divisions\n",
    "  if boxes.dtype.kind == \"i\":\n",
    "    boxes = boxes.astype(\"float\")\n",
    " \n",
    "  # initialize the list of picked indexes  \n",
    "  pick = []\n",
    " \n",
    "  # grab the coordinates of the bounding boxes\n",
    "  x1 = boxes[:,0]\n",
    "  y1 = boxes[:,1]\n",
    "  x2 = boxes[:,2]\n",
    "  y2 = boxes[:,3]\n",
    " \n",
    "  # compute the area of the bounding boxes and sort the bounding\n",
    "  # boxes by the bottom-right y-coordinate of the bounding box\n",
    "  area = (x2 - x1 + 1) * (y2 - y1 + 1)\n",
    "  idxs = np.argsort(y2)\n",
    " \n",
    "  # keep looping while some indexes still remain in the indexes\n",
    "  # list\n",
    "  while len(idxs) > 0:\n",
    "    # grab the last index in the indexes list and add the\n",
    "    # index value to the list of picked indexes\n",
    "    last = len(idxs) - 1\n",
    "    i = idxs[last]\n",
    "    pick.append(i)\n",
    " \n",
    "    # find the largest (x, y) coordinates for the start of\n",
    "    # the bounding box and the smallest (x, y) coordinates\n",
    "    # for the end of the bounding box\n",
    "    xx1 = np.maximum(x1[i], x1[idxs[:last]])\n",
    "    yy1 = np.maximum(y1[i], y1[idxs[:last]])\n",
    "    xx2 = np.minimum(x2[i], x2[idxs[:last]])\n",
    "    yy2 = np.minimum(y2[i], y2[idxs[:last]])\n",
    " \n",
    "    # compute the width and height of the bounding box\n",
    "    w = np.maximum(0, xx2 - xx1 + 1)\n",
    "    h = np.maximum(0, yy2 - yy1 + 1)\n",
    " \n",
    "    # compute the ratio of overlap\n",
    "    overlap = (w * h) / area[idxs[:last]]\n",
    " \n",
    "    # delete all indexes from the index list that have\n",
    "    idxs = np.delete(idxs, np.concatenate(([last],\n",
    "      np.where(overlap > overlapThresh)[0])))\n",
    " \n",
    "  # return only the bounding boxes that were picked using the\n",
    "  # integer data type\n",
    "  return boxes[pick].astype(\"int\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import matplotlib.image as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import cv2\n",
    "import glob\n",
    "import time\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from skimage.feature import hog\n",
    "import scipy.misc\n",
    "import pickle\n",
    "\n",
    "\n",
    "# NOTE: the next import is only valid for scikit-learn version <= 0.17\n",
    "#from sklearn.cross_validation import train_test_split\n",
    "# for scikit-learn >= 0.18 use:\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "    \n",
    "# Read in cars and notcars\n",
    "images = glob.glob('database/vehicles/*/*.png')\n",
    "cars = []\n",
    "notcars = []\n",
    "for image in images:\n",
    "  cars.append(image)\n",
    "\n",
    "images = glob.glob('database/non-vehicles/*/*.png')\n",
    "for image in images:\n",
    "  notcars.append(image)\n",
    "\n",
    "image = mpimg.imread(cars[0])\n",
    "print(\"min:\",np.min(image[0]),\" max:\",np.max(image[0]))\n",
    "      \n",
    "# Reduce the sample size for fast testing\n",
    "#sample_size = 1000\n",
    "#random_indizes = np.arange(sample_size)\n",
    "#np.random.shuffle(random_indizes)\n",
    "\n",
    "#cars = np.array(cars)[random_indizes]\n",
    "#notcars = np.array(notcars)[random_indizes]\n",
    "print(\"cars:\",len(cars),\" not cars:\",len(notcars))\n",
    "\n",
    "i=1\n",
    "SVC_PATH =\"svc.p\"\n",
    "params = (\n",
    "#    (\"RGB\",\"ALL\",True,True,True),\n",
    "#    (\"RGB\",\"ALL\",False,True,True),\n",
    "    (\"RGB\",\"ALL\",True,False,True),\n",
    "#    (\"RGB\",1,True,False,True),\n",
    "#    (\"RGB\",2,True,False,True),\n",
    "#    (\"RGB\",0,True,False,True),\n",
    "#    (\"RGB\",\"ALL\",False,False,True),\n",
    "#    (\"RGB\",\"ALL\",True,True,False),\n",
    "#    (\"RGB\",\"ALL\",False,True,False),\n",
    "#    (\"RGB\",\"ALL\",True,False,False),#\n",
    "#    (\"HSV\",\"ALL\",True,True,True),\n",
    "#    (\"HSV\",\"ALL\",False,True,True),\n",
    "    (\"HSV\",\"ALL\",True,False,True))\n",
    "#    (\"HSV\",0,True,False,True),\n",
    "#    (\"HSV\",1,True,False,True),\n",
    "#    (\"HSV\",2,True,False,True),\n",
    "#    (\"HSV\",\"ALL\",False,False,True),\n",
    "#    (\"HSV\",\"ALL\",True,True,False),\n",
    "#    (\"HSV\",\"ALL\",False,True,False),\n",
    "#    (\"HSV\",\"ALL\",True,False,False),#\n",
    "    #error\n",
    "#    (\"LUV\",\"ALL\",True,True,True),\n",
    "#    (\"LUV\",\"ALL\",False,True,True),\n",
    "#    (\"LUV\",\"ALL\",True,False,True),\n",
    "#    (\"LUV\",\"ALL\",False,False,True),\n",
    "#    (\"LUV\",\"ALL\",True,True,False),\n",
    "#    (\"LUV\",\"ALL\",False,True,False),\n",
    "#    (\"LUV\",\"ALL\",True,False,False),#\n",
    "#    (\"HLS\",\"ALL\",True,True,True),\n",
    "#    (\"HLS\",\"ALL\",False,True,True),\n",
    "#    (\"HLS\",\"ALL\",True,False,True),\n",
    "#    (\"HLS\",\"0,1\",True,False,True),\n",
    "#    (\"HLS\",\"0,2\",True,False,True),\n",
    "#    (\"HLS\",\"1,2\",True,False,True),\n",
    "#    (\"HLS\",\"ALL\",True,True,True),\n",
    "#    (\"HLS\",\"0,1\",True,True,True),\n",
    "#    (\"HLS\",\"0,2\",True,True,True),\n",
    "#    (\"HLS\",\"1,2\",True,True,True),\n",
    "#    (\"HLS\",0,True,False,True),\n",
    "#    (\"HLS\",1,True,False,True),\n",
    "#    (\"HLS\",2,True,False,True),\n",
    "#    (\"HLS\",0,True,False,True),\n",
    "#    (\"HLS\",1,True,False,True),\n",
    "#    (\"HLS\",2,True,False,True),\n",
    "#    (\"HLS\",\"ALL\",False,False,True),\n",
    "#    (\"HLS\",\"ALL\",True,True,False),\n",
    "#    (\"HLS\",\"ALL\",False,True,False),\n",
    "#    (\"HLS\",\"ALL\",True,False,False),\n",
    "#    (\"YUV\",\"ALL\",True,True,True),\n",
    "#    (\"YUV\",\"ALL\",False,True,True),\n",
    "#error    (\"YUV\",\"ALL\",True,False,True),\n",
    " #   (\"YUV\",0,True,False,True),\n",
    " #   (\"YUV\",1,True,False,True),\n",
    " #   (\"YUV\",2,True,False,True),\n",
    " #   (\"YUV\",\"ALL\",False,False,True),\n",
    " #   (\"YUV\",\"ALL\",True,True,False),\n",
    " #   (\"YUV\",\"ALL\",False,True,False),\n",
    " #   (\"YUV\",\"ALL\",True,False,False),\n",
    " #   (\"YCrCb\",\"ALL\",True,True,True),\n",
    " #   (\"YCrCb\",\"ALL\",False,True,True),\n",
    " #   (\"YCrCb\",\"ALL\",True,False,True),\n",
    " #   (\"YCrCb\",\"ALL\",False,False,True),\n",
    " #   (\"YCrCb\",\"ALL\",True,True,False),\n",
    " #   (\"YCrCb\",\"ALL\",False,True,False),\n",
    " #   (\"YCrCb\",\"ALL\",True,False,False))\n",
    "#for i in range(len(params)):\n",
    "if True:\n",
    "    \n",
    "  ### TODO: Tweak these parameters and see how the results change.\n",
    "  color_space = 'RGB' # Can be RGB, HSV, LUV, HLS, YUV, YCrCb\n",
    "  orient = 9  # HOG orientations\n",
    "  pix_per_cell = 8 # HOG pixels per cell\n",
    "  cell_per_block = 2 # HOG cells per block\n",
    "  hog_channel = \"ALL\" # Can be 0, 1, 2, \"0,1\",\"0,2\",\"1,2\",or \"ALL\"\n",
    "  spatial_size = (16, 16) # Spatial binning dimensions\n",
    "  hist_bins = 16    # Number of histogram bins\n",
    "  spatial_feat = True # Spatial features on or off\n",
    "  hist_feat = True # Histogram features on or off\n",
    "  hog_feat = True # HOG features on or off\n",
    "\n",
    "  (color_space,hog_channel,spatial_feat,hist_feat,hog_feat) = (\"RGB\",\"ALL\",True,False,True)\n",
    "#  (color_space,hog_channel,spatial_feat,hist_feat,hog_feat) = params[i]\n",
    "#  print(i,\" params:\", params[i])  \n",
    "\n",
    "  car_features = extract_features(cars, color_space=color_space, \n",
    "                        spatial_size=spatial_size, hist_bins=hist_bins, \n",
    "                        orient=orient, pix_per_cell=pix_per_cell, \n",
    "                        cell_per_block=cell_per_block, \n",
    "                        hog_channel=hog_channel, spatial_feat=spatial_feat, \n",
    "                        hist_feat=hist_feat, hog_feat=hog_feat,feature_vec=True)\n",
    "\n",
    "  notcar_features = extract_features(notcars, color_space=color_space, \n",
    "                        spatial_size=spatial_size, hist_bins=hist_bins, \n",
    "                        orient=orient, pix_per_cell=pix_per_cell, \n",
    "                        cell_per_block=cell_per_block, \n",
    "                        hog_channel=hog_channel, spatial_feat=spatial_feat, \n",
    "                        hist_feat=hist_feat, hog_feat=hog_feat,feature_vec=True)\n",
    "\n",
    "  X = np.vstack((car_features, notcar_features)).astype(np.float64)      \n",
    "  print(X.shape)\n",
    "# Fit a per-column scaler\n",
    "  X_scaler = StandardScaler().fit(X)\n",
    "# Apply the scaler to X\n",
    "  scaled_X = X_scaler.transform(X)\n",
    "\n",
    "# Define the labels vector\n",
    "  y = np.hstack((np.ones(len(car_features)), np.zeros(len(notcar_features))))\n",
    "\n",
    "\n",
    "# Split up data into randomized training and test sets\n",
    "  rand_state = 1\n",
    "  X_train, X_test, y_train, y_test = train_test_split(\n",
    "    scaled_X, y, test_size=0.2, random_state=rand_state)\n",
    "\n",
    "  print(i,' using:',orient,'orientations',pix_per_cell,\n",
    "    'pixels per cell and', cell_per_block,'cells per block')\n",
    "  print('Feature vector length:', len(X_train[0]))\n",
    "  # Use a linear SVC \n",
    "#  svc = LinearSVC()\n",
    "#  svc = LinearSVC(penalty='l1',class_weight='balanced',dual=False)\n",
    "#  svc = SVC(C=10.0, gamma = 0.0001, kernel=\"rbf\",cache_size=1000,class_weight='balanced')\n",
    "  svc = SGDClassifier(shuffle=True,fit_intercept=False,loss=\"hinge\",n_jobs=-1,learning_rate=\"optimal\",penalty=\"elasticnet\",class_weight=\"balanced\",n_iter=5)#avoid copying\n",
    "\n",
    "  # Check the training time for the SVC\n",
    "  t=time.time()\n",
    "  svc.fit(X_train, y_train)\n",
    "    \n",
    "  t2 = time.time()\n",
    "  print(round(t2-t, 2), 'Seconds to train SVC...')\n",
    "  # Check the score of the SVC\n",
    "  print('Test Accuracy of SVC = ', round(svc.score(X_test, y_test), 4))\n",
    "  # Check the prediction time for a single sample\n",
    "  t=time.time()\n",
    "    \n",
    "  #save the calibration in a pickle file\n",
    "  data = {}\n",
    "  data[\"X_scaler\"]=X_scaler\n",
    "  data[\"svc\"]=svc\n",
    "  with open(SVC_PATH, 'wb') as f:\n",
    "    pickle.dump(data, file=f)    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "scores = ['precision', 'recall']\n",
    "\n",
    "# Set the parameters by cross-validation\n",
    "tuned_parameters = [{'loss':[\"hinge\",\"modified_huber\",\"squared_hinge\"],'alpha': [0.00001,0.0001,0.001,0.01],\"penalty\":[\"l1\",\"l2\",\"elasticnet\"]}]\n",
    "\n",
    "scores = ['precision', 'recall']\n",
    "\n",
    "for score in scores:\n",
    "    print(\"# Tuning hyper-parameters for %s\" % score)\n",
    "    print()\n",
    "\n",
    "    clf = GridSearchCV(SGDClassifier(shuffle=True,fit_intercept=False,n_jobs=-1,learning_rate=\"optimal\",penalty=\"l2\",class_weight=\"balanced\",n_iter=5), tuned_parameters, cv=5,\n",
    "                       scoring='%s_macro' % score)\n",
    "    clf.fit(X_train, y_train)\n",
    "\n",
    "    print(\"Best parameters set found on development set:\")\n",
    "    print()\n",
    "    print(clf.best_params_)\n",
    "    print()\n",
    "    print(\"Grid scores on development set:\")\n",
    "    print()\n",
    "    means = clf.cv_results_['mean_test_score']\n",
    "    stds = clf.cv_results_['std_test_score']\n",
    "    for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "        print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "              % (mean, std * 2, params))\n",
    "    print()\n",
    "\n",
    "    print(\"Detailed classification report:\")\n",
    "    print()\n",
    "    print(\"The model is trained on the full development set.\")\n",
    "    print(\"The scores are computed on the full evaluation set.\")\n",
    "    print()\n",
    "    y_true, y_pred = y_test, clf.predict(X_test)\n",
    "    print(classification_report(y_true, y_pred))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#class to create and average a heat map \n",
    "class Heatmap():\n",
    "  def __init__(self,threshold):\n",
    "    self.recent_maps = []\n",
    "    self.map = None\n",
    "    self.threshold = threshold\n",
    "    \n",
    "  #add boxes to the current heat map, threshold it and average it over the history \n",
    "  def update(self,shape,bboxes):\n",
    "    self.map = np.zeros(shape)\n",
    "    \n",
    "    # Iterate through list of bboxes\n",
    "    for box in bboxes:\n",
    "      # Assuming each \"box\" takes the form ((x1, y1), (x2, y2))\n",
    "      self.map[box[0][1]:box[1][1], box[0][0]:box[1][0]] += 1\n",
    "    \n",
    "    self.map[self.map <= self.threshold] = 0\n",
    "    \n",
    "    if len(self.recent_maps) > 10:\n",
    "      self.recent_maps.pop()\n",
    "    self.recent_maps.insert(0,self.map.copy())\n",
    "    \n",
    "  def average(self):\n",
    "    if len(self.recent_maps) > 1:\n",
    "      maps = np.array(self.recent_maps)\n",
    "      self.map = np.mean(maps,axis=0)\n",
    "    \n",
    "  #answer the averaged heat map\n",
    "  def getMap(self):\n",
    "    return self.map\n",
    "\n",
    "  #draw the heatmap boxes\n",
    "  def drawLabeledBoxes(self,img,color):\n",
    "    labels = label(self.map)\n",
    "    # Iterate through all detected cars\n",
    "    for car_number in range(1, labels[1]+1):\n",
    "        # Find pixels with each car_number label value\n",
    "        nonzero = (labels[0] == car_number).nonzero()\n",
    "        # Identify x and y values of those pixels\n",
    "        nonzeroy = np.array(nonzero[0])\n",
    "        nonzerox = np.array(nonzero[1])\n",
    "        # Define a bounding box based on min/max x and y\n",
    "        bbox = ((np.min(nonzerox), np.min(nonzeroy)), (np.max(nonzerox), np.max(nonzeroy)))\n",
    "        # Draw the box on the image\n",
    "        cv2.rectangle(img, bbox[0], bbox[1], color, 6)\n",
    "    # Return the image\n",
    "    return img\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import matplotlib.image as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import cv2\n",
    "import glob\n",
    "import time\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from skimage.feature import hog\n",
    "import scipy.misc\n",
    "import pickle\n",
    "\n",
    "print(os.listdir(\"test_images/\"))\n",
    "from scipy.ndimage.measurements import label\n",
    "\n",
    "SVC_PATH =\"svc.p\"\n",
    "\n",
    "global image_counter,heatmap\n",
    "image_counter=0\n",
    "heatmap = Heatmap(3)\n",
    "\n",
    "(color_space,hog_channel,spatial_feat,hist_feat,hog_feat) = (\"RGB\",\"ALL\",True,False,True)#params[i]\n",
    "\n",
    "#the process chain \n",
    "def process_colored_image(image,smooth,debug,imageName,X_scaler,svc):\n",
    "  global image_counter,heatmap\n",
    "  image_counter += 1\n",
    "  \n",
    "  if image.shape[0]!= 720 or image.shape[1]!= 1280:\n",
    "    image = cv2.resize(image,(1280, 720), interpolation = cv2.INTER_CUBIC)\n",
    "    print(\"resize:\",image.shape)\n",
    "\n",
    "  normImage = image.copy().astype(\"float32\") / 255.0\n",
    "#  print(\"min:\",np.min(normImage),\" max:\",np.max(normImage))\n",
    "\n",
    "  search_param = ((64,390,486,224,1056,0.5),\n",
    "   (96,390,486,160,1120,0.5),\n",
    "   (128,390,518,128,1152,0.5),\n",
    "   (160,390,554,123,1157,0.66),\n",
    "   (192,390,586,19,1261,0.66))\n",
    " #  (224,390,614,24,1256,0.75))\n",
    "    \n",
    "  windows = []\n",
    "  if not smooth:\n",
    "    heatmap = Heatmap(0)\n",
    "    \n",
    "  all_hot_windows = []\n",
    "  result = image\n",
    "  for i in range(len(search_param)):\n",
    "    result = image\n",
    "  \n",
    "    (size,y_start, y_stop, x_start, x_stop,ov) = search_param[i]\n",
    "\n",
    "    new_win = slide_window(normImage, x_start_stop=(x_start, x_stop), y_start_stop=(y_start, y_stop), \n",
    "                    xy_window=(size,size), xy_overlap=(ov, ov))\n",
    "#    result = drawBoxes(result, new_win, color=(255-(255*i/5), 255*i/5, 0), thick=(10-i))  \n",
    "#    plt.imshow(result)\n",
    "#    plt.show()\n",
    "    windows += new_win\n",
    "#  print(windows2)\n",
    "    \n",
    "  hot_windows = searchWindows(normImage, windows, svc, X_scaler, color_space=color_space, \n",
    "                      spatial_size=spatial_size, hist_bins=hist_bins, \n",
    "                      orient=orient, pix_per_cell=pix_per_cell, \n",
    "                      cell_per_block=cell_per_block, \n",
    "                      hog_channel=hog_channel, spatial_feat=spatial_feat, \n",
    "                      hist_feat=hist_feat, hog_feat=hog_feat,hardNegative=True)                       \n",
    "\n",
    "  result = image\n",
    "  result = drawBoxes(result, hot_windows, color=(0, 0, 255), thick=4)                    \n",
    "    \n",
    "  heatmap.update((image.shape[0],image.shape[1]),hot_windows)\n",
    "  result = heatmap.drawLabeledBoxes(result,(255,0,0))\n",
    "  if smooth:\n",
    "    heatmap.average()\n",
    "    result = heatmap.drawLabeledBoxes(result,(0,255,0))\n",
    "    \n",
    "\n",
    "  if debug:\n",
    "    if not imageName is None:\n",
    "      path_to_image = os.path.join(\"output_images\",\"{0}_{1}.jpg\".format(imageName,\"result\"))\n",
    "      scipy.misc.imsave(path_to_image, result)    \n",
    "    \n",
    "  return result\n",
    "\n",
    "\n",
    "#loop over the test pictures\n",
    "resultPath = \"result_images/\"\n",
    "if not os.path.exists(resultPath):\n",
    "  os.mkdir(resultPath)\n",
    "\n",
    "data = {}\n",
    "#load trained svc\n",
    "with open(SVC_PATH, \"rb\") as f:\n",
    "  data = pickle.load(f)\n",
    "\n",
    "X_scaler = data[\"X_scaler\"]\n",
    "svc = data[\"svc\"]\n",
    "\n",
    "\n",
    "if True:\n",
    "  item = \"test3.jpg\"\n",
    "for item in os.listdir(\"test_images/\"):\n",
    "  #Read in and grayscale the image\n",
    "  print(item)\n",
    "  path_to_image = os.path.join(\"test_images\",item)\n",
    "  image = mpimg.imread(path_to_image)    \n",
    "\n",
    "  result = process_colored_image(image,False,True,item[:-4],X_scaler, svc)\n",
    "\n",
    "  f, (ax1, ax2) = plt.subplots(1, 2, figsize=(24, 9))\n",
    "  f.tight_layout()\n",
    "  ax1.imshow(image)\n",
    "  ax1.set_title('Original Image', fontsize=50)\n",
    "\n",
    "  ax2.set_title('Processed Image', fontsize=50)\n",
    "  ax2.imshow(result)\n",
    "  plt.subplots_adjust(left=0., right=1, top=0.9, bottom=0.)\n",
    "  #loop over the test pictures\n",
    "\n",
    "  path_to_result = os.path.join(resultPath,\"result_{0}\".format(item))\n",
    "  fig = plt.gcf()\n",
    "#  fig.savefig(path_to_result) \n",
    "  plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Import everything needed to edit/save/watch video clips\n",
    "from moviepy.editor import VideoFileClip\n",
    "from IPython.display import HTML\n",
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "data = {}\n",
    "#load trained svc\n",
    "with open(SVC_PATH, \"rb\") as f:\n",
    "  data = pickle.load(f)\n",
    "\n",
    "X_scaler = data[\"X_scaler\"]\n",
    "svc = data[\"svc\"]\n",
    "\n",
    "def process_image(image):\n",
    "    # NOTE: The output you return should be a color image (3 channel) for processing video below\n",
    "    # TODO: put your pipeline here,\n",
    "    # you should return the final output (image with lines are drawn on lanes)\n",
    "    return process_colored_image(image,True,True,None,X_scaler,svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda env:py35]",
   "language": "python",
   "name": "conda-env-py35-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
